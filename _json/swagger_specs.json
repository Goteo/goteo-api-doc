{
  "basePath": "/v1",
  "definitions": {
    "api_auth_token_get_Token": {
      "properties": {
        "access_token": {
          "description": "Acces token that can be used to authenticate the API endpoints throught a HTTP Header:<br> \"Authorization: Bearer {access_token}\"",
          "type": "string"
        },
        "expires_in": {
          "description": "Number of seconds wich the access_token will be valid",
          "type": "string"
        },
        "token_type": {
          "description": "Currently, only `bearer`",
          "type": "string"
        }
      }
    },
    "api_calls_call_get_CallFull": {
      "properties": {
        "amount-available": {
          "description": "Available amount of cash to distribute among projects",
          "type": "number"
        },
        "amount-committed": {
          "description": "Maximum total amount of cash that was available to distribute among projects",
          "type": "number"
        },
        "amount-peers": {
          "description": "Amount of cash already distribute among projects",
          "type": "number"
        },
        "amount-remaining": {
          "description": "Amount of cash still available for distribute among projects",
          "type": "number"
        },
        "applies": {
          "description": "Text description about which kind of projects will be selected for the matchfunding call",
          "type": "string"
        },
        "call-location": {
          "description": "Custom location value for the call",
          "type": "string"
        },
        "call-url": {
          "description": "URL where to visualize the matchfunding call",
          "type": "string"
        },
        "date-closed": {
          "description": "Date when the matchfunding call was closed",
          "type": "string"
        },
        "date-opened": {
          "description": "Date when the matchfunding call was opened",
          "type": "string"
        },
        "date-published": {
          "description": "Date when the matchfunding call was published",
          "type": "string"
        },
        "date-succeeded": {
          "description": "Date when the matchfunding call was succeeded",
          "type": "string"
        },
        "description": {
          "description": "Full description for the matchfunding call",
          "type": "string"
        },
        "description-short": {
          "description": "Short description for the matchfunding call",
          "type": "string"
        },
        "dossier": {
          "description": "External links for the matchfunding call",
          "type": "string"
        },
        "facebook-url": {
          "description": "URL of the Facebook page for the matchfunding call",
          "type": "string"
        },
        "id": {
          "description": "Id of the matchfunding call",
          "type": "string"
        },
        "image-background-url": {
          "description": "URL for the main call image",
          "type": "string"
        },
        "image-url": {
          "description": "URL for the main call image",
          "type": "string"
        },
        "image-url-big": {
          "description": "URL for the main call image (big size)",
          "type": "string"
        },
        "legal": {
          "description": "Some particular legal or conditions for the matchfunding call",
          "type": "string"
        },
        "location": {
          "description": "Location of the call",
          "items": {
            "$ref": "#/definitions/api_calls_call_get_CallLocation"
          },
          "type": "array"
        },
        "logo-url": {
          "description": "URL for the call's logo",
          "type": "string"
        },
        "name": {
          "description": "Name of the matchfunding call",
          "type": "string"
        },
        "owner": {
          "description": "User ID of the call's owner",
          "type": "string"
        },
        "owner-name": {
          "description": "User name of the call's owner",
          "type": "string"
        },
        "projects-active": {
          "description": "Active projects (still with a running campaign) in this matchfunding call",
          "type": "integer"
        },
        "projects-applied": {
          "description": "Total number of projects effectively applicating to this matchfunding call",
          "type": "integer"
        },
        "projects-succeeded": {
          "description": "Projects funded in this matchfunding call",
          "type": "integer"
        },
        "projects-total": {
          "description": "Total number of projects included into this matchfunding call",
          "type": "integer"
        },
        "resources": {
          "description": "Text description of the available resources for the matchfunding call",
          "type": "string"
        },
        "scope": {
          "description": "Scope of the matchfunding call, one of `local`, `regional`, `national`, `global` (or `null`)",
          "type": "string"
        },
        "sponsors": {
          "description": "All available sponsors in a ordered list",
          "items": {
            "$ref": "#/definitions/api_calls_call_get_CallSponsor"
          },
          "type": "array"
        },
        "status": {
          "description": "Status of the call, one of `pending`, `editing`, `reviewing`, `applying`, `published`, `succeeded`, `expired`",
          "type": "string"
        },
        "translations": {
          "description": "All available translations in a dictionary by language",
          "items": {
            "$ref": "#/definitions/api_calls_call_get_CallTranslation"
          },
          "type": "array"
        },
        "tweet": {
          "description": "Text used to make an automatic tweet to share the the matchfunding call",
          "type": "string"
        },
        "user": {
          "description": "Call owner's user Object",
          "type": "string"
        },
        "whom": {
          "description": "Target of the matchfunding call",
          "type": "string"
        }
      }
    },
    "api_calls_call_get_CallLocation": {
      "properties": {
        "city": {
          "description": "City location of the matchfunding call (language may vary)",
          "type": "string"
        },
        "country": {
          "description": "Country name of the matchfunding call (language may vary)",
          "type": "string"
        },
        "country-code": {
          "description": "Country code of the matchfunding call in [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format",
          "type": "string"
        },
        "latitude": {
          "description": "Project's location latitude coordinate",
          "type": "number"
        },
        "longitude": {
          "description": "Project's location longitude coordinate",
          "type": "number"
        },
        "radius": {
          "description": "Radius (Km) of influence for the call (if any)",
          "type": "number"
        },
        "region": {
          "description": "Region location of the matchfunding call (language may vary)",
          "type": "string"
        }
      }
    },
    "api_calls_call_get_CallSponsor": {
      "properties": {
        "image-url": {
          "description": "URL for the image/logo of the sponsor",
          "type": "string"
        },
        "name": {
          "description": "Name of the sponsor",
          "type": "string"
        },
        "url": {
          "description": "URL for the sponsor (if available)",
          "type": "string"
        }
      }
    },
    "api_calls_call_get_CallTranslation": {
      "properties": {
        "*misc*": {
          "description": "Every item of a translation will have the same structure as the parent object with the same fields (**and those fields only**) translated. Non translated items won't be displayed at all",
          "type": "string"
        }
      }
    },
    "api_calls_call_projects_get_ProjectCall": {
      "properties": {
        "amount": {
          "description": "Currently achieved amount for the project",
          "type": "number"
        },
        "amount-call": {
          "description": "Only the matchfunding part of the achieved amount for the project",
          "type": "number"
        },
        "date-created": {
          "description": "Date when the project was created RFC822 format",
          "type": "string"
        },
        "date-published": {
          "description": "Date when the project was published RFC822 format",
          "type": "string"
        },
        "description-short": {
          "description": "Short description of the project",
          "type": "string"
        },
        "id": {
          "description": "Project unique identifier",
          "type": "string"
        },
        "image-url": {
          "description": "URL with the main image of the project",
          "type": "string"
        },
        "lang": {
          "description": "Main language of the project",
          "type": "string"
        },
        "latitude": {
          "description": "Latitude coordinate for the project",
          "type": "number"
        },
        "longitude": {
          "description": "Longitude coordinate for the project",
          "type": "number"
        },
        "minimum": {
          "description": "Minimum amount to achieve to consider the project succeeded",
          "type": "number"
        },
        "name": {
          "description": "Name of the project",
          "type": "string"
        },
        "node": {
          "description": "Node where the project was created originally",
          "type": "string"
        },
        "optimum": {
          "description": "Optimum amount to achieve for the project to achieve all his goals",
          "type": "number"
        },
        "owner": {
          "description": "Projects owner's user ID",
          "type": "string"
        },
        "owner-name": {
          "description": "Projects owner's user name",
          "type": "string"
        },
        "project-url": {
          "description": "URL where for the project",
          "type": "string"
        },
        "region": {
          "description": "Region location for the project",
          "type": "string"
        },
        "status": {
          "description": "Status of the project",
          "type": "string"
        }
      }
    },
    "api_calls_calls_get_Call": {
      "properties": {
        "amount-available": {
          "description": "Available amount of cash to distribute among projects",
          "type": "number"
        },
        "amount-committed": {
          "description": "Maximum total amount of cash that was available to distribute among projects",
          "type": "number"
        },
        "amount-peers": {
          "description": "Amount of cash already distribute among projects",
          "type": "number"
        },
        "amount-remaining": {
          "description": "Amount of cash still available for distribute among projects",
          "type": "number"
        },
        "call-location": {
          "description": "Custom location value for the call",
          "type": "string"
        },
        "call-url": {
          "description": "URL where to visualize the matchfunding call",
          "type": "string"
        },
        "date-opened": {
          "description": "Date when the matchfunding call was opened",
          "type": "string"
        },
        "date-published": {
          "description": "Date when the matchfunding call was published",
          "type": "string"
        },
        "date-succeeded": {
          "description": "Date when the matchfunding call was succeeded",
          "type": "string"
        },
        "description-short": {
          "description": "Short description for the matchfunding call",
          "type": "string"
        },
        "id": {
          "description": "Id of the matchfunding call",
          "type": "string"
        },
        "image-url": {
          "description": "URL for the main call's image",
          "type": "string"
        },
        "latitude": {
          "description": "Latitude coordinate for the call",
          "type": "number"
        },
        "logo-url": {
          "description": "URL for the call's logo",
          "type": "string"
        },
        "longitude": {
          "description": "Longitude coordinate for the call",
          "type": "number"
        },
        "name": {
          "description": "Name of the matchfunding call",
          "type": "string"
        },
        "owner": {
          "description": "User ID of the call's owner",
          "type": "string"
        },
        "owner-name": {
          "description": "User name of the call's owner",
          "type": "string"
        },
        "projects-active": {
          "description": "Active projects (still with a running campaign) in this matchfunding call",
          "type": "integer"
        },
        "projects-applied": {
          "description": "Total number of projects effectively applicating to this matchfunding call",
          "type": "integer"
        },
        "projects-succeeded": {
          "description": "Projects funded in this matchfunding call",
          "type": "integer"
        },
        "projects-total": {
          "description": "Total number of projects included into this matchfunding call",
          "type": "integer"
        },
        "radius": {
          "description": "Radius (Km) of influence for the call (if any)",
          "type": "number"
        },
        "region": {
          "description": "Region location for the call",
          "type": "string"
        },
        "sponsors": {
          "description": "All available sponsors in a ordered list",
          "items": {
            "$ref": "#/definitions/api_calls_call_get_CallSponsor"
          },
          "type": "array"
        },
        "status": {
          "description": "Status of the call, one of `pending`, `editing`, `reviewing`, `applying`, `published`, `succeeded`, `expired`",
          "type": "string"
        }
      }
    },
    "api_calls_calls_get_ResponseCall": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/api_calls_calls_get_Call"
          },
          "type": "array"
        },
        "meta": {
          "$ref": "#/definitions/api_projects_projects_get_MetaProject"
        }
      }
    },
    "api_categories_categories_get_Category": {
      "properties": {
        "description": {
          "description": "Category short description",
          "type": "string"
        },
        "id": {
          "description": "Category unique identifier",
          "type": "string"
        },
        "name": {
          "description": "Category name",
          "type": "string"
        },
        "total-projects": {
          "description": "Number of published projects in the category",
          "type": "integer"
        },
        "total-users": {
          "description": "Number of users interested in the category",
          "type": "integer"
        }
      }
    },
    "api_categories_categories_get_MetaCategory": {
      "properties": {
        "from_date": {
          "description": "Only if filtering by from_date",
          "type": "string"
        },
        "lang": {
          "description": "Only if filtering by lang",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "location": {
          "description": "Only if filtering by location",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "node": {
          "description": "Only if filtering by node",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "project": {
          "description": "Only if filtering by project",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "to_date": {
          "description": "Only if filtering by to_date",
          "type": "string"
        },
        "total": {
          "description": "Total elements available for the collection",
          "type": "integer"
        }
      }
    },
    "api_categories_categories_get_ResponseCategory": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/api_categories_categories_get_Category"
          },
          "type": "array"
        },
        "meta": {
          "$ref": "#/definitions/api_categories_categories_get_MetaCategory"
        }
      }
    },
    "api_digests_get_Bucket": {
      "properties": {
        "*month/year*": {
          "description": "The name of this field depends on the type of buckets generated, could be a month number or a year. The value will be the same object of the endpoint being requested"
        }
      }
    },
    "api_digests_get_Digest": {
      "properties": {
        "buckets": {
          "description": "An associative array where the key is an identifier of the period and the value is the content of the endpoint.<br>A digest generated for a whole year will return 12 buckets correspondig to each month of the year.<br>A digest generated without a year will return one buecket per each year of the Goteo's history",
          "items": {
            "$ref": "#/definitions/api_digests_get_Bucket"
          },
          "type": "array"
        },
        "endpoint": {
          "description": "The name of the endpoint used to digest",
          "type": "string"
        },
        "global": {
          "$ref": "#/definitions/api_digests_get_Bucket",
          "description": "The content of the endpoint with the summarized data for all the buckets together"
        }
      }
    },
    "api_invests_invest_get_InvestFull": {
      "properties": {
        "amount": {
          "description": "Amount of the contribution",
          "type": "number"
        },
        "call": {
          "description": "Id of the matchfunding call if this invest belongs to a invest in selected",
          "type": "string"
        },
        "conversion-ratio": {
          "description": "Currency rate at the moment of the payment (relative to EUR)",
          "type": "number"
        },
        "currency": {
          "description": "Currency of the contribution (currently one of `EUR`, `GBP`, `USD`) in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format",
          "type": "string"
        },
        "date-charged": {
          "description": "Date-only when the invest was charged in RFC822 format",
          "type": "string"
        },
        "date-created": {
          "description": "Date-only when the invest was created in RFC822 format",
          "type": "string"
        },
        "date-returned": {
          "description": "Date-only when the invest was returned (if applicable) in RFC822 format",
          "type": "string"
        },
        "date-updated": {
          "description": "Date & Time when the invest was last updated in RFC822 format",
          "type": "string"
        },
        "id": {
          "description": "Invest unique identifier",
          "type": "integer"
        },
        "location": {
          "description": "Location of the invest",
          "items": {
            "$ref": "#/definitions/api_invests_invest_get_InvestLocation"
          },
          "type": "array"
        },
        "project": {
          "description": "Id of the invest where applies the invests",
          "type": "string"
        },
        "region": {
          "description": "Region location for the invest",
          "type": "string"
        },
        "resign": {
          "description": "True if the user does not want any reward in exchango of the contribution",
          "type": "boolean"
        },
        "status": {
          "description": "Status of the payment, one of `processing`, `pending`, `charged`, `cancelled`, `paid`, `returned`, `relocated`, `pool-returned`",
          "type": "string"
        },
        "type": {
          "description": "Type of the payment, one of `payment`, `drop`, `pool`",
          "type": "string"
        }
      }
    },
    "api_invests_invest_get_InvestLocation": {
      "properties": {
        "city": {
          "description": "City location of the invest (language may vary)",
          "type": "string"
        },
        "country": {
          "description": "Country name of the invest (language may vary)",
          "type": "string"
        },
        "country-code": {
          "description": "Country code of the invest in [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format",
          "type": "string"
        },
        "latitude": {
          "description": "Project's location latitude coordinate",
          "type": "number"
        },
        "longitude": {
          "description": "Project's location longitude coordinate",
          "type": "number"
        },
        "region": {
          "description": "Region location of the invest (language may vary)",
          "type": "string"
        }
      }
    },
    "api_invests_invests_get_ExtraInvest": {
      "properties": {
        "calls": {
          "description": "Number of matchfunding calls applying in the current query",
          "type": "integer"
        },
        "pledged": {
          "description": "Total sum pledged amount for the current query",
          "type": "number"
        },
        "projects": {
          "description": "Total sum of projects applying in the current query",
          "type": "integer"
        },
        "refunded": {
          "description": "Total sum of refunded amount for the current query",
          "type": "number"
        }
      }
    },
    "api_invests_invests_get_Invest": {
      "properties": {
        "amount": {
          "description": "Amount of the contribution",
          "type": "number"
        },
        "call": {
          "description": "Id of the matchfunding call if this invest belongs to a invest in selected",
          "type": "string"
        },
        "conversion-ratio": {
          "description": "Currency rate at the moment of the payment (relative to EUR)",
          "type": "number"
        },
        "currency": {
          "description": "Currency of the contribution (currently one of `EUR`, `GBP`, `USD`) in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format",
          "type": "string"
        },
        "date-charged": {
          "description": "Date-only when the invest was charged in RFC822 format",
          "type": "string"
        },
        "date-created": {
          "description": "Date-only when the invest was created in RFC822 format",
          "type": "string"
        },
        "date-returned": {
          "description": "Date-only when the invest was returned (if applicable) in RFC822 format",
          "type": "string"
        },
        "date-updated": {
          "description": "Date & Time when the invest was last updated in RFC822 format",
          "type": "string"
        },
        "id": {
          "description": "Invest unique identifier",
          "type": "integer"
        },
        "latitude": {
          "description": "Latitude coordinate for the invest",
          "type": "number"
        },
        "longitude": {
          "description": "Longitude coordinate for the invest",
          "type": "number"
        },
        "project": {
          "description": "Id of the invest where applies the invests",
          "type": "string"
        },
        "region": {
          "description": "Region location for the invest",
          "type": "string"
        },
        "resign": {
          "description": "True if the user does not want any reward in exchango of the contribution",
          "type": "boolean"
        },
        "status": {
          "description": "Status of the payment, one of `processing`, `pending`, `charged`, `cancelled`, `paid`, `returned`, `relocated`, `pool-returned`",
          "type": "string"
        },
        "type": {
          "description": "Type of the payment, one of `payment`, `drop`, `pool`",
          "type": "string"
        }
      }
    },
    "api_invests_invests_get_ResponseInvest": {
      "properties": {
        "extra": {
          "$ref": "#/definitions/api_invests_invests_get_ExtraInvest"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/api_invests_invests_get_Invest"
          },
          "type": "array"
        },
        "meta": {
          "$ref": "#/definitions/api_projects_projects_get_MetaProject"
        }
      }
    },
    "api_licenses_licenses_get_License": {
      "properties": {
        "description": {
          "description": "License description",
          "type": "string"
        },
        "id": {
          "description": "License unique identifier",
          "type": "string"
        },
        "name": {
          "description": "License name",
          "type": "string"
        },
        "svg-url": {
          "description": "URL with the SVG logo of the license",
          "type": "string"
        },
        "total-projects": {
          "description": "Number of rewards using the license for all published projects",
          "type": "integer"
        },
        "total-rewards": {
          "description": "Number of published projects using the license in some of its rewards",
          "type": "integer"
        },
        "url": {
          "description": "URL where to find the license content terms",
          "type": "string"
        }
      }
    },
    "api_licenses_licenses_get_MetaLicense": {
      "properties": {
        "category": {
          "description": "Only if filtering by category",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "from_date": {
          "description": "Only if filtering by from_date",
          "type": "string"
        },
        "lang": {
          "description": "Only if filtering by lang",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "location": {
          "description": "Only if filtering by location",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "node": {
          "description": "Only if filtering by node",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "project": {
          "description": "Only if filtering by project",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "to_date": {
          "description": "Only if filtering by to_date",
          "type": "string"
        },
        "total": {
          "description": "Total elements available for the collection",
          "type": "integer"
        }
      }
    },
    "api_licenses_licenses_get_ResponseLicense": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/api_licenses_licenses_get_License"
          },
          "type": "array"
        },
        "meta": {
          "$ref": "#/definitions/api_licenses_licenses_get_MetaLicense"
        }
      }
    },
    "api_projects_project_donors_get_ProjectDonor": {
      "properties": {
        "anonymous": {
          "description": "If the contributor is anonymous",
          "type": "boolean"
        },
        "date-created": {
          "description": "Date when the user was created RFC822 format",
          "type": "string"
        },
        "id": {
          "description": "User unique identifier",
          "type": "string"
        },
        "name": {
          "description": "Name of the user",
          "type": "string"
        },
        "node": {
          "description": "Node where the user was created originally",
          "type": "string"
        },
        "profile-image-url": {
          "description": "URL with the avatar (image) of the user",
          "type": "string"
        },
        "profile-url": {
          "description": "URL for the user profile",
          "type": "string"
        }
      }
    },
    "api_projects_project_donors_get_ResponseDonor": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/api_projects_project_donors_get_ProjectDonor"
          },
          "type": "array"
        },
        "meta": {
          "$ref": "#/definitions/api_users_users_get_MetaUser"
        }
      }
    },
    "api_projects_project_get_ProjectCost": {
      "properties": {
        "amount": {
          "description": "Cost's budget amount",
          "type": "number"
        },
        "date-from": {
          "description": "Date when to start the task associated with the cost (if any)",
          "type": "string"
        },
        "date-to": {
          "description": "Date when to finish the task associated with the cost (if any)",
          "type": "string"
        },
        "description": {
          "description": "Cost's description",
          "type": "string"
        },
        "id": {
          "description": "Cost's unique identifier",
          "type": "integer"
        },
        "name": {
          "description": "Cost's title",
          "type": "string"
        },
        "required": {
          "description": "Whether is an optional or not cost (optional costs count for the optimum project's amount)",
          "type": "string"
        },
        "type": {
          "description": "Cost's type (one of `task`, `structure`, `material`)",
          "type": "string"
        }
      }
    },
    "api_projects_project_get_ProjectFull": {
      "properties": {
        "about": {
          "description": "About the project or his creators",
          "type": "string"
        },
        "amount": {
          "description": "Currently achieved amount for the project",
          "type": "number"
        },
        "costs": {
          "description": "Economical detailed list of necessities",
          "items": {
            "$ref": "#/definitions/api_projects_project_get_ProjectCost"
          },
          "type": "array"
        },
        "currency": {
          "description": "Currency used in the project (ISO4217 Format)",
          "type": "string"
        },
        "currency-rate": {
          "description": "Currency rate when the project was created (if was not EUR)",
          "type": "number"
        },
        "date-closed": {
          "description": "Date when the project was closed (if was a failed project) RFC822 format",
          "type": "string"
        },
        "date-created": {
          "description": "Date when the project was created RFC822 format",
          "type": "string"
        },
        "date-passed": {
          "description": "Date when the project passed the first round (reached the minimum) RFC822 format",
          "type": "string"
        },
        "date-published": {
          "description": "Date when the project was published RFC822 format",
          "type": "string"
        },
        "date-succeeded": {
          "description": "Date when the project was succeeded RFC822 format",
          "type": "string"
        },
        "date-updated": {
          "description": "Date when the project was updated RFC822 format",
          "type": "string"
        },
        "description": {
          "description": "Full description of the project",
          "type": "string"
        },
        "description-short": {
          "description": "Short description of the project",
          "type": "string"
        },
        "goal": {
          "description": "Goal of the project",
          "type": "string"
        },
        "id": {
          "description": "Project unique identifier",
          "type": "string"
        },
        "image-gallery": {
          "description": "List of images for the project",
          "items": {
            "$ref": "#/definitions/api_projects_project_get_ProjectGallery"
          },
          "type": "array"
        },
        "image-url": {
          "description": "URL with the main image of the project",
          "type": "string"
        },
        "image-url-big": {
          "description": "URL with the main image (big size) of the project",
          "type": "string"
        },
        "lang": {
          "description": "Main language of the project",
          "type": "string"
        },
        "location": {
          "description": "Location of the project",
          "items": {
            "$ref": "#/definitions/api_projects_project_get_ProjectLocation"
          },
          "type": "array"
        },
        "minimum": {
          "description": "Minimum amount to achieve to consider the project succeeded",
          "type": "number"
        },
        "motivation": {
          "description": "Motivation text writen by the owner of the project",
          "type": "string"
        },
        "name": {
          "description": "Name of the project",
          "type": "string"
        },
        "needs": {
          "description": "Non-economical detailed list of necessities",
          "items": {
            "$ref": "#/definitions/api_projects_project_get_ProjectNeed"
          },
          "type": "array"
        },
        "node": {
          "description": "Node where the project was created originally",
          "type": "string"
        },
        "optimum": {
          "description": "Optimum amount to achieve for the project to achieve all his goals",
          "type": "number"
        },
        "owner": {
          "description": "Project owner's user ID",
          "type": "string"
        },
        "owner-name": {
          "description": "Project owner's user name",
          "type": "string"
        },
        "project-url": {
          "description": "URL where for the project",
          "type": "string"
        },
        "rewards": {
          "description": "List of rewards for the project",
          "items": {
            "$ref": "#/definitions/api_projects_project_get_ProjectReward"
          },
          "type": "array"
        },
        "scope": {
          "description": "Scope of the project",
          "type": "string"
        },
        "status": {
          "description": "Status of the project",
          "type": "string"
        },
        "translations": {
          "description": "All available translations in a list indexed by language in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format",
          "items": {
            "$ref": "#/definitions/api_projects_project_get_ProjectTranslation"
          },
          "type": "array"
        },
        "user": {
          "description": "Project owner's user Object",
          "type": "string"
        },
        "video-url": {
          "description": "URL with the main video of the project",
          "type": "string"
        },
        "widget-url": {
          "description": "URL with the main widget (embed code) of the project",
          "type": "string"
        }
      }
    },
    "api_projects_project_get_ProjectGallery": {
      "properties": {
        "image-url": {
          "description": "URL image gallery item",
          "type": "string"
        },
        "resource-url": {
          "description": "URL resource (link) associated with the gallery item (if any)",
          "type": "string"
        }
      }
    },
    "api_projects_project_get_ProjectLocation": {
      "properties": {
        "city": {
          "description": "City location of the project (language may vary)",
          "type": "string"
        },
        "country": {
          "description": "Country name of the project (language may vary)",
          "type": "string"
        },
        "country-code": {
          "description": "Country code of the project in [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format",
          "type": "string"
        },
        "latitude": {
          "description": "Project's location latitude coordinate",
          "type": "number"
        },
        "longitude": {
          "description": "Project's location longitude coordinate",
          "type": "number"
        },
        "region": {
          "description": "Region location of the project (language may vary)",
          "type": "string"
        }
      }
    },
    "api_projects_project_get_ProjectNeed": {
      "properties": {
        "description": {
          "description": "Description for the non-economical desired project's contribution",
          "type": "string"
        },
        "id": {
          "description": "Non-economical desired contribution unique identifier",
          "type": "integer"
        },
        "name": {
          "description": "Name for the non-economical desired project's contribution",
          "type": "string"
        },
        "type": {
          "description": "Type fot the non-economical necessity (one of `lend`, `task`)",
          "type": "string"
        }
      }
    },
    "api_projects_project_get_ProjectReward": {
      "properties": {
        "amount": {
          "description": "Minimum amount required for a invest to apply this reward",
          "type": "number"
        },
        "description": {
          "description": "Reward's item description",
          "type": "string"
        },
        "icon-url": {
          "description": "Reward's item URL icon",
          "type": "string"
        },
        "id": {
          "description": "Reward's unique identifier",
          "type": "integer"
        },
        "license": {
          "description": "Reward's associated license ID (if any, only for `type=social`)",
          "type": "string"
        },
        "license-description": {
          "description": "Reward's associated license description (if any, only for `type=social`)",
          "type": "string"
        },
        "license-name": {
          "description": "Reward's associated license name (if any, only for `type=social`)",
          "type": "string"
        },
        "license-svg-url": {
          "description": "Reward's associated license SVG image URL resource (if any, only for `type=social`)",
          "type": "string"
        },
        "license-url": {
          "description": "Reward's associated license URL containing its terms (if any, only for `type=social`)",
          "type": "string"
        },
        "name": {
          "description": "Reward's item name",
          "type": "string"
        },
        "type": {
          "description": "Reward's item type (one of `social`, `individual`)",
          "type": "string"
        }
      }
    },
    "api_projects_project_get_ProjectTranslation": {
      "properties": {
        "*misc*": {
          "description": "Every item of a translation will have the same structure as the parent object with the same fields (**and those fields only**) translated. Non translated items won't be displayed at all.<br>**costs**, **rewards** and **needs** may be translated as well (in this case the translated array generated will use the ID as a key).",
          "type": "string"
        }
      }
    },
    "api_projects_projects_get_MetaProject": {
      "properties": {
        "category": {
          "description": "Only if filtering by category",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "from_date": {
          "description": "Only if filtering by from_date",
          "type": "string"
        },
        "lang": {
          "description": "Only if filtering by lang",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "limit": {
          "description": "Limit of results per page when retrieving a collection",
          "type": "integer"
        },
        "location": {
          "description": "Only if filtering by location",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "node": {
          "description": "Only if filtering by node",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "page": {
          "description": "Current page, `0` based (first page is zero)",
          "type": "integer"
        },
        "project": {
          "description": "Only if filtering by project",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "to_date": {
          "description": "Only if filtering by to_date",
          "type": "string"
        },
        "total": {
          "description": "Total elements available for the collection",
          "type": "integer"
        }
      }
    },
    "api_projects_projects_get_Project": {
      "properties": {
        "amount": {
          "description": "Currently achieved amount for the project",
          "type": "number"
        },
        "date-created": {
          "description": "Date when the project was created RFC822 format",
          "type": "string"
        },
        "date-published": {
          "description": "Date when the project was published RFC822 format",
          "type": "string"
        },
        "description-short": {
          "description": "Short description of the project",
          "type": "string"
        },
        "id": {
          "description": "Project unique identifier",
          "type": "string"
        },
        "image-url": {
          "description": "URL with the main image of the project",
          "type": "string"
        },
        "lang": {
          "description": "Main language of the project",
          "type": "string"
        },
        "latitude": {
          "description": "Latitude coordinate for the project (if available)",
          "type": "number"
        },
        "longitude": {
          "description": "Longitude coordinate for the project (if available)",
          "type": "number"
        },
        "minimum": {
          "description": "Minimum amount to achieve to consider the project succeeded",
          "type": "number"
        },
        "name": {
          "description": "Name of the project",
          "type": "string"
        },
        "node": {
          "description": "Node where the project was created originally",
          "type": "string"
        },
        "optimum": {
          "description": "Optimum amount to achieve for the project to achieve all his goals",
          "type": "number"
        },
        "owner": {
          "description": "Project owner's user ID",
          "type": "string"
        },
        "owner-name": {
          "description": "Project owner's user name",
          "type": "string"
        },
        "project-url": {
          "description": "Project's original URL (crowd-funding web page)",
          "type": "string"
        },
        "region": {
          "description": "Region location for the project",
          "type": "string"
        },
        "status": {
          "description": "Status of the project",
          "type": "string"
        }
      }
    },
    "api_projects_projects_get_ResponseProject": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/api_projects_projects_get_Project"
          },
          "type": "array"
        },
        "meta": {
          "$ref": "#/definitions/api_projects_projects_get_MetaProject"
        }
      }
    },
    "api_reports_reports_community_get_Category": {
      "properties": {
        "id": {
          "description": "Category unique identifier",
          "type": "integer"
        },
        "name": {
          "description": "Category name",
          "type": "string"
        },
        "percentage-users": {
          "description": "Percentage of users in this category over the total number of users",
          "type": "number"
        },
        "users": {
          "description": "Total number of users interested in the category",
          "type": "integer"
        }
      }
    },
    "api_reports_reports_community_get_Collaboration": {
      "properties": {
        "interactions": {
          "description": "Karma number of the user collaborations",
          "type": "integer"
        },
        "name": {
          "description": "Name of the user",
          "type": "string"
        },
        "profile-image-url": {
          "description": "URL with the avatar (image) of the user",
          "type": "string"
        },
        "profile-url": {
          "description": "URL for the user profile",
          "type": "string"
        },
        "user": {
          "description": "User unique identifier",
          "type": "string"
        }
      }
    },
    "api_reports_reports_community_get_Community": {
      "properties": {
        "average-collaborators": {
          "description": "Average number of collaborators per succesful  project",
          "type": "integer"
        },
        "average-donors": {
          "description": "Average number of donors per successful project",
          "type": "integer"
        },
        "cash-donors": {
          "description": "Number of donors donanting to projects off-line",
          "type": "integer"
        },
        "categories": {
          "description": "Array of categories",
          "items": {
            "$ref": "#/definitions/api_reports_reports_community_get_Category"
          },
          "type": "array"
        },
        "collaborators": {
          "description": "Number of collaborators",
          "type": "integer"
        },
        "creators-collaborators": {
          "description": "Number of creators collaborating with other  projects |",
          "type": "integer"
        },
        "creators-donors": {
          "description": "Number of creators funding other projects",
          "type": "integer"
        },
        "creditcard-donors": {
          "description": "Number of donors using a Credit Card",
          "type": "integer"
        },
        "donors": {
          "description": "Number of donors",
          "type": "integer"
        },
        "donors-collaborators": {
          "description": "Number of donors who collaborate with others creators",
          "type": "integer"
        },
        "leading-category": {
          "description": "Category with the highest number of interested users",
          "type": "integer"
        },
        "multidonors": {
          "description": "Number of donors who donate to more than 1 project",
          "type": "integer"
        },
        "paypal-donors": {
          "description": "Number of donors using PayPal",
          "type": "integer"
        },
        "percentage-donors-users": {
          "description": "Percentage of registered users that are donors (*100 * donors / users*)",
          "type": "number"
        },
        "percentage-multidonor-donors": {
          "description": "Percentage of multidonors (over total donors: *100 * multidonors / donors*)",
          "type": "number"
        },
        "percentage-multidonor-users": {
          "description": "Percentage of multidonors (over total users: *100 * multidonors / users*)",
          "type": "number"
        },
        "percentage-unsubscribed-users": {
          "description": "Percentage of unsubscribed users (over the  total number of users)",
          "type": "number"
        },
        "percentage-users-leading-category": {
          "description": "Percentage of users in the leading category",
          "type": "number"
        },
        "percentage-users-second-category": {
          "description": "Percentage of users in this category",
          "type": "number"
        },
        "second-category": {
          "description": "Second category with more users",
          "type": "integer"
        },
        "top10-collaborators": {
          "description": "Top 10 talkers",
          "items": {
            "$ref": "#/definitions/api_reports_reports_community_get_Collaboration"
          },
          "type": "array"
        },
        "top10-donors": {
          "description": "The top 10 donors who spend more money on projects (the most generous co-financiers)",
          "items": {
            "$ref": "#/definitions/api_reports_reports_community_get_Donation"
          },
          "type": "array"
        },
        "top10-multidonors": {
          "description": "Top 10 multidonors who are contributed to more different projects (The most diversified co-financiers)",
          "items": {
            "$ref": "#/definitions/api_reports_reports_community_get_Donation"
          },
          "type": "array"
        },
        "users": {
          "description": "Total number of registered users",
          "type": "integer"
        },
        "users-leading-category": {
          "description": "Number of users in this category",
          "type": "integer"
        },
        "users-second-category": {
          "description": "Number of users in this category",
          "type": "integer"
        }
      }
    },
    "api_reports_reports_community_get_Donation": {
      "properties": {
        "amount": {
          "description": "Total amount of money (\u20ac) spent by the user in projects",
          "type": "number"
        },
        "contributions": {
          "description": "Total number of different projects the user has contributed to",
          "type": "integer"
        },
        "name": {
          "description": "Name of the user",
          "type": "string"
        },
        "profile-image-url": {
          "description": "URL with the avatar (image) of the user",
          "type": "string"
        },
        "profile-url": {
          "description": "URL for the user profile",
          "type": "string"
        },
        "user": {
          "description": "User unique identifier",
          "type": "string"
        }
      }
    },
    "api_reports_reports_money_get_Money": {
      "properties": {
        "average-donation": {
          "description": "Average amount of money (\u20ac) given by a donor",
          "type": "number"
        },
        "average-donation-paypal": {
          "description": "Average amount of money (\u20ac) given by a donor using Paypal",
          "type": "number"
        },
        "average-failed": {
          "description": "Average money raised for failed projects (which haven't reached the minimum required amount)",
          "type": "number"
        },
        "average-minimum": {
          "description": "Average minimum cost (\u20ac) for successful projects",
          "type": "number"
        },
        "average-received": {
          "description": "Average money raised (\u20ac) for successful projects (those which reached the minimum)",
          "type": "number"
        },
        "average-second-round": {
          "description": "Average money raised only in the second round (\u20ac)",
          "type": "number"
        },
        "cash-amount": {
          "description": "Total amount of money (\u20ac) collected by direct bank transfer",
          "type": "integer"
        },
        "creditcard-amount": {
          "description": "Total amount of money (\u20ac) raised using Credit Card transactions",
          "type": "integer"
        },
        "fee-amount": {
          "description": "Total fee keeped by Goteo",
          "type": "number"
        },
        "matchfund-amount": {
          "description": "Amount of money raised in calls (*Capital riego distribuido* + crowdfunding money)",
          "type": "integer"
        },
        "matchfundpledge-amount": {
          "description": "*Capital Riego de Goteo* (funds from institutions and companies added to the [Capital Riego](https://goteo.org/service/resources))",
          "type": "integer"
        },
        "paypal-amount": {
          "description": "Total amount of money (\u20ac) raised using PayPal transactions",
          "type": "integer"
        },
        "percentage-pledged-failed": {
          "description": "Percentage of money raised over the minimum on failed projects",
          "type": "number"
        },
        "percentage-pledged-successful": {
          "description": "Percentage of money raised over the minimum on successful projects",
          "type": "number"
        },
        "pledged": {
          "description": "Total amount of money (\u20ac) raised by Goteo",
          "type": "integer"
        },
        "refunded": {
          "description": "Refunded money (\u20ac) on failed projects",
          "type": "integer"
        }
      }
    },
    "api_reports_reports_projects_get_Project": {
      "properties": {
        "average-amount-successful": {
          "description": "Average amount (&euro;) of money raised in successful projects",
          "type": "number"
        },
        "average-posts-successful": {
          "description": "Average number of posts published by successful projects",
          "type": "number"
        },
        "failed": {
          "description": "Number of failed projects (unsuccessful crowdfunding campaigns)",
          "type": "integer"
        },
        "percentage-successful": {
          "description": "Percentage of successful projects",
          "type": "integer"
        },
        "percentage-successful-completed": {
          "description": "Percentage of successful projects with completed campaign (over the total projects: *100 * successful-complete / (successful-complete + failed)* ",
          "type": "number"
        },
        "published": {
          "description": "Number of published projects.<br>**Date filters** here uses the date where the project started its campaign",
          "type": "integer"
        },
        "received": {
          "description": "Number of received projects (accepted for review by Goteo administrators).<br>**Date filters** here uses the date where the project was sent to revision",
          "type": "integer"
        },
        "successful": {
          "description": "Number of successful projects (which have achieved the minimum required amount)<br>**Date filters** here uses the date where the had achieved the minimum amount",
          "type": "integer"
        },
        "successful-completed": {
          "description": "Number of successful projects with completed campaign.<br>**Date filters** here uses the date where the project ended his campaign",
          "type": "integer"
        },
        "top10-collaborations": {
          "description": "The 10 campaigns with the most collaborations",
          "items": {
            "$ref": "#/definitions/api_reports_reports_projects_get_ProjectContribution"
          },
          "type": "array"
        },
        "top10-donations": {
          "description": "The 10 campaigns with the most donors (individual contributions)",
          "items": {
            "$ref": "#/definitions/api_reports_reports_projects_get_ProjectContribution"
          },
          "type": "array"
        },
        "top10-receipts": {
          "description": "The 10 campaigns with the most money raised",
          "items": {
            "$ref": "#/definitions/api_reports_reports_projects_get_ProjectAmount"
          },
          "type": "array"
        }
      }
    },
    "api_reports_reports_projects_get_ProjectAmount": {
      "properties": {
        "date-published": {
          "description": "Date when the project was published RFC822 format",
          "type": "string"
        },
        "description-short": {
          "description": "Short description of the project",
          "type": "string"
        },
        "image-url": {
          "description": "URL with the main image of the project",
          "type": "string"
        },
        "name": {
          "description": "Name of the project",
          "type": "string"
        },
        "project": {
          "description": "Project's unique ID",
          "type": "string"
        },
        "project-url": {
          "description": "Project's original URL (crowd-funding web page)",
          "type": "string"
        },
        "total": {
          "description": "Total amount (\u20ac) of money raised for the project",
          "type": "integer"
        },
        "video-url": {
          "description": "URL with the main video of the project",
          "type": "string"
        }
      }
    },
    "api_reports_reports_projects_get_ProjectContribution": {
      "properties": {
        "date-published": {
          "description": "Date when the project was published RFC822 format",
          "type": "string"
        },
        "description-short": {
          "description": "Short description of the project",
          "type": "string"
        },
        "image-url": {
          "description": "URL with the main image of the project",
          "type": "string"
        },
        "name": {
          "description": "Name of the project",
          "type": "string"
        },
        "project": {
          "description": "Project's unique ID",
          "type": "string"
        },
        "project-url": {
          "description": "Project's original URL (crowd-funding web page)",
          "type": "string"
        },
        "total": {
          "description": "Total number contributions (or collaborations)",
          "type": "integer"
        },
        "video-url": {
          "description": "URL with the main video of the project",
          "type": "string"
        }
      }
    },
    "api_reports_reports_rewards_get_Favourite": {
      "properties": {
        "description": {
          "description": "Reward's description",
          "type": "string"
        },
        "icon": {
          "description": "Identifier of the reward's icon",
          "type": "string"
        },
        "name": {
          "description": "Reward's name",
          "type": "string"
        },
        "svg-url": {
          "description": "URL where to find the reward's icon",
          "type": "string"
        },
        "total": {
          "description": "Number of uses of this reward in successful projects",
          "type": "integer"
        }
      }
    },
    "api_reports_reports_rewards_get_PerAmount": {
      "properties": {
        "rewards-between-100-400": {
          "description": "Num. of users choosing rewards from 100 \u20ac to 400 \u20ac",
          "type": "integer"
        },
        "rewards-between-15-30": {
          "description": "Num. of users choosing rewards from 15 \u20ac to 30 \u20ac",
          "type": "integer"
        },
        "rewards-between-30-100": {
          "description": "Num. of users choosing rewards from 30 \u20ac to 100 \u20ac",
          "type": "integer"
        },
        "rewards-less-than-15": {
          "description": "Num. of users choosing rewards cheaper than 15 \u20ac",
          "type": "integer"
        },
        "rewards-more-than-400": {
          "description": "Num. of users choosing rewards more expensive than 400 \u20ac",
          "type": "integer"
        }
      }
    },
    "api_reports_reports_rewards_get_Reward": {
      "properties": {
        "favorite-rewards": {
          "description": "Reward type used in successful projects",
          "items": {
            "$ref": "#/definitions/api_reports_reports_rewards_get_Favourite"
          },
          "type": "array"
        },
        "percentage-reward-refusal": {
          "description": "Pertentage of co-financiers who renounce reward",
          "type": "number"
        },
        "reward-refusal": {
          "description": "Number of co-financiers who renounce reward",
          "type": "integer"
        },
        "rewards-per-amount": {
          "description": "Number of rewards picked by the users in steps",
          "items": {
            "$ref": "#/definitions/api_reports_reports_rewards_get_PerAmount"
          },
          "type": "array"
        }
      }
    },
    "api_reports_reports_summary_get_Summary": {
      "properties": {
        "average-donation": {
          "description": "Average amount of money (\u20ac) given by a donor",
          "type": "number"
        },
        "categories": {
          "description": "Array of categories",
          "items": {
            "$ref": "#/definitions/api_reports_reports_community_get_Category"
          },
          "type": "array"
        },
        "favorite-rewards": {
          "description": "Reward type used in successful projects",
          "items": {
            "$ref": "#/definitions/api_reports_reports_rewards_get_Favourite"
          },
          "type": "array"
        },
        "matchfund-amount": {
          "description": "Amount of money raised in calls (Capital riego distribuido + crowdfunding money)",
          "type": "integer"
        },
        "matchfundpledge-amount": {
          "description": "*Capital Riego de Goteo* (funds from institutions and companies added to the [Capital Riego](https://goteo.org/service/resources))",
          "type": "integer"
        },
        "pledged": {
          "description": "Total amount of money (\u20ac) raised by Goteo",
          "type": "integer"
        },
        "projects-failed": {
          "description": "Number of failed projects (unsuccessful crowdfunding campaigns)",
          "type": "integer"
        },
        "projects-published": {
          "description": "Number of published projects.<br>**Date filters** here uses the date where the project started its campaign",
          "type": "integer"
        },
        "projects-received": {
          "description": "Number of received projects (accepted for review by Goteo administrators).<br>**Date filters** here uses the date where the project was sent to revision",
          "type": "integer"
        },
        "projects-successful": {
          "description": "Number of successful projects (which have achieved the minimum required amount).<br>**Date filters** here uses the date where the had achieved the minimum amount",
          "type": "integer"
        },
        "top10-collaborations": {
          "description": "The 10 campaigns with the most collaborations",
          "items": {
            "$ref": "#/definitions/api_reports_reports_projects_get_ProjectContribution"
          },
          "type": "array"
        },
        "top10-donations": {
          "description": "The 10 campaigns with the most donors (individual contributions)",
          "items": {
            "$ref": "#/definitions/api_reports_reports_projects_get_ProjectContribution"
          },
          "type": "array"
        },
        "users": {
          "description": "Total number of registered users",
          "type": "integer"
        }
      }
    },
    "api_users_user_get_UserFull": {
      "properties": {
        "about": {
          "description": "User's about text",
          "type": "string"
        },
        "amount-public-invested": {
          "description": "Amount of money invested in any project (excluding anonymous investions)",
          "type": "number"
        },
        "date-created": {
          "description": "Date when the user was created RFC822 format",
          "type": "string"
        },
        "id": {
          "description": "User unique identifier",
          "type": "string"
        },
        "lang": {
          "description": "Language for the user's texts description",
          "type": "string"
        },
        "name": {
          "description": "Name of the user",
          "type": "string"
        },
        "node": {
          "description": "Node where the user was created originally",
          "type": "string"
        },
        "profile-image-url": {
          "description": "URL with the avatar (image) of the user",
          "type": "string"
        },
        "profile-url": {
          "description": "URL for the user profile",
          "type": "string"
        },
        "projects-collaborated": {
          "description": "Number of project the user has interacted",
          "type": "number"
        },
        "projects-public-invested": {
          "description": "Number of projects where the user has invested (excluding anonymous investions)",
          "type": "number"
        },
        "projects-published": {
          "description": "Number of project the user has created and published",
          "type": "number"
        },
        "translations": {
          "description": "All available translations in a list indexed by language in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format",
          "items": {
            "$ref": "#/definitions/api_users_user_get_UserTranslation"
          },
          "type": "array"
        }
      }
    },
    "api_users_user_get_UserTranslation": {
      "properties": {
        "about": {
          "description": "User's about text translated (if any)",
          "type": "string"
        },
        "name": {
          "description": "Name of the user translated (if any)",
          "type": "string"
        }
      }
    },
    "api_users_users_get_MetaUser": {
      "properties": {
        "category": {
          "description": "Only if filtering by category",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "from_date": {
          "description": "Only if filtering by from_date",
          "type": "string"
        },
        "lang": {
          "description": "Only if filtering by lang",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "limit": {
          "description": "Limit of results per page when retrieving a collection",
          "type": "integer"
        },
        "node": {
          "description": "Only if filtering by node",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "page": {
          "description": "Current page, `0` based (first page is zero)",
          "type": "integer"
        },
        "project": {
          "description": "Only if filtering by project",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "to_date": {
          "description": "Only if filtering by to_date",
          "type": "string"
        },
        "total": {
          "description": "Total elements available for the collection",
          "type": "integer"
        }
      }
    },
    "api_users_users_get_ResponseUser": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/api_users_users_get_User"
          },
          "type": "array"
        },
        "meta": {
          "$ref": "#/definitions/api_users_users_get_MetaUser"
        }
      }
    },
    "api_users_users_get_User": {
      "properties": {
        "date-created": {
          "description": "Date when the user was created RFC822 format",
          "type": "string"
        },
        "id": {
          "description": "User unique identifier",
          "type": "string"
        },
        "name": {
          "description": "Name of the user",
          "type": "string"
        },
        "node": {
          "description": "Node where the user was created originally",
          "type": "string"
        },
        "profile-image-url": {
          "description": "URL with the avatar (image) of the user",
          "type": "string"
        },
        "profile-url": {
          "description": "URL for the user profile",
          "type": "string"
        }
      }
    }
  },
  "info": {
    "description": "Goteo.org Api",
    "termsOfService": "Terms of service",
    "title": "Goteo.org Api",
    "version": "1.1"
  },
  "paths": {
    "/calls/": {
      "get": {
        "description": "This resource returns call information.<br/>http://developers.goteo.org/doc/calls",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "Filter by individual node(s). Multiple nodes can be specified. Restricts the list to the calls originally created in that node(s)",
            "in": "query",
            "name": "node",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by individual project(s). Multiple projects can be specified. Restricts the list to the calls that containing that projects",
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Get results by specified lang. Multiple langs can be specified",
            "in": "query",
            "name": "lang",
            "type": "string"
          },
          {
            "description": "Filter from date. Ex. \"2013-01-01\". Restricts the list to the calls published in that range",
            "format": "date",
            "in": "query",
            "name": "from_date",
            "type": "string"
          },
          {
            "description": "Filter until date.. Ex. \"2014-01-01\". Restricts the list to the calls published in that range",
            "format": "date",
            "in": "query",
            "name": "to_date",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by project category. Multiple categories can be specified. Restricts the list to the calls containing project with interests in that category(ies)",
            "in": "query",
            "name": "category",
            "type": "integer"
          },
          {
            "collectionFormat": "csv",
            "description": "Filter by project location (Latitude,longitude,Radius in Km). Restricts the list to the calls with projects geolocated in that area",
            "in": "query",
            "name": "location",
            "type": "number"
          },
          {
            "description": "Page number (starting at 1) if the result can be paginated",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "Page limit (maximum 50 results, defaults to 10) if the result can be paginated",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available calls",
            "schema": {
              "$ref": "#/definitions/api_calls_calls_get_ResponseCall"
            }
          },
          "400": {
            "description": "Invalid parameters format"
          },
          "401": {
            "description": "Resource requires authorization"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Call API",
        "tags": [
          "calls"
        ]
      }
    },
    "/calls/{call_id}": {
      "get": {
        "description": "This resource returns call information.<br/>http://developers.goteo.org/calls#call",
        "parameters": [
          {
            "description": "Unique ID for the call",
            "in": "path",
            "name": "call_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Call data",
            "schema": {
              "$ref": "#/definitions/api_calls_call_get_CallFull"
            }
          },
          "401": {
            "description": "Resource requires authorization"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Call API",
        "tags": [
          "call"
        ]
      }
    },
    "/calls/{call_id}/projects/": {
      "get": {
        "description": "This resource returns user projects information.<br/>http://developers.goteo.org/calls#projects",
        "parameters": [
          {
            "description": "Unique ID for the call",
            "in": "path",
            "name": "call_id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by individual node(s). Multiple nodes can be specified. Restricts the list to the users originally created in that node(s)",
            "in": "query",
            "name": "node",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Get results by specified lang. Multiple langs can be specified",
            "in": "query",
            "name": "lang",
            "type": "string"
          },
          {
            "description": "Filter from date. Ex. \"2013-01-01\". Restricts the list to the users created in that range",
            "format": "date",
            "in": "query",
            "name": "from_date",
            "type": "string"
          },
          {
            "description": "Filter until date.. Ex. \"2014-01-01\". Restricts the list to the users created in that range",
            "format": "date",
            "in": "query",
            "name": "to_date",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by call category. Multiple users can be specified. Restricts the list to the users that have interests in that category(ies)",
            "in": "query",
            "name": "category",
            "type": "integer"
          },
          {
            "description": "Page number (starting at 1) if the result can be paginated",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "Page limit (maximum 50 results, defaults to 10) if the result can be paginated",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Project data",
            "schema": {
              "items": {
                "$ref": "#/definitions/api_projects_projects_get_ResponseProject"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Resource requires authorization"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Call API",
        "tags": [
          "call_projects"
        ]
      }
    },
    "/categories/": {
      "get": {
        "description": "This resource returns categories information.<br/>http://developers.goteo.org/doc/categories",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "Filter by individual node(s). Multiple nodes can be specified. Restricts the list to the categories used in projects assigned in that nodes",
            "in": "query",
            "name": "node",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by individual project(s). Multiple projects can be specified. Restricts the list to the categories used in that projects",
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "description": "Filter from date. Ex. \"2013-01-01\". Restricts the list to the categories used in projects created between that dates",
            "format": "date",
            "in": "query",
            "name": "from_date",
            "type": "string"
          },
          {
            "description": "Filter until date.. Ex. \"2014-01-01\". Restricts the list to the categories used in projects created between that dates",
            "format": "date",
            "in": "query",
            "name": "to_date",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Get results by specified lang. Multiple langs can be specified",
            "in": "query",
            "name": "lang",
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "Filter by project location (Latitude,longitude,Radius in Km). Restricts the list to the categories used in projects geolocated in that area",
            "in": "query",
            "name": "location",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available categories",
            "schema": {
              "$ref": "#/definitions/api_categories_categories_get_ResponseCategory"
            }
          },
          "400": {
            "description": "Invalid parameters format"
          },
          "401": {
            "description": "Resource requires authorization"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Category API",
        "tags": [
          "categories"
        ]
      }
    },
    "/digests/{endpoint}": {
      "get": {
        "description": "This resource returns grouped statistics<br/>http://developers.goteo.org/doc/digests",
        "parameters": [
          {
            "description": "Endpoint to digest. Not all endpoints may be available to digest",
            "in": "path",
            "name": "endpoint",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by individual node(s). Multiple nodes can be specified",
            "in": "query",
            "name": "node",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by individual project(s). Multiple projects can be specified",
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "description": "Filter by project category. Multiple categories can be specified",
            "in": "query",
            "name": "category",
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "description": "Get results by specified lang. Multiple langs can be specified",
            "in": "query",
            "name": "lang",
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "Filter by project location (Latitude,longitude,Radius in Km)",
            "in": "query",
            "name": "location",
            "type": "number"
          },
          {
            "description": "Groups the buckets in 12 months for the specified year",
            "in": "query",
            "name": "year",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available projects",
            "schema": {
              "$ref": "#/definitions/api_digests_get_Digest"
            }
          },
          "400": {
            "description": "Invalid parameters format"
          },
          "401": {
            "description": "Resource requires authorization"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Digest Stats API",
        "tags": [
          "digests"
        ]
      }
    },
    "/invests/": {
      "get": {
        "description": "This resource returns invest information.<br/>http://developers.goteo.org/doc/invests",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "Filter by individual node(s). Multiple nodes can be specified. Restricts the list to the invests originally created in that node(s)",
            "in": "query",
            "name": "node",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by individual project(s). Multiple projects can be specified. Restricts the list to the invests that have either collaborate or contributed (financially) to that project(s).",
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "description": "Filter from date. Ex. \"2013-01-01\". Restricts the list to the invests created in that range",
            "format": "date",
            "in": "query",
            "name": "from_date",
            "type": "string"
          },
          {
            "description": "Filter until date.. Ex. \"2014-01-01\". Restricts the list to the invests created in that range",
            "format": "date",
            "in": "query",
            "name": "to_date",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by project category. Multiple categories can be specified. Restricts the list to the invests that have interests in that category(ies)",
            "in": "query",
            "name": "category",
            "type": "integer"
          },
          {
            "collectionFormat": "csv",
            "description": "Filter by project location (Latitude,longitude,Radius in Km). Restricts the list to the invests used in projects geolocated in that area",
            "in": "query",
            "name": "location",
            "type": "number"
          },
          {
            "description": "Page number (starting at 1) if the result can be paginated",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "Page limit (maximum 50 results, defaults to 10) if the result can be paginated",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available invests",
            "schema": {
              "$ref": "#/definitions/api_invests_invests_get_ResponseInvest"
            }
          },
          "400": {
            "description": "Invalid parameters format"
          },
          "401": {
            "description": "Resource requires authorization"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Invest API",
        "tags": [
          "invests"
        ]
      }
    },
    "/invests/{invest_id}": {
      "get": {
        "description": "This resource returns invest information.<br/>http://developers.goteo.org/invests",
        "parameters": [
          {
            "description": "Unique ID for the invest",
            "in": "path",
            "name": "invest_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Invest data",
            "schema": {
              "$ref": "#/definitions/api_invests_invest_get_InvestFull"
            }
          },
          "401": {
            "description": "Resource requires authorization"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Invest API",
        "tags": [
          "invest"
        ]
      }
    },
    "/licenses/": {
      "get": {
        "description": "This resource returns license information.<br/>http://developers.goteo.org/doc/licenses",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "Filter by individual node(s). Multiple nodes can be specified. Restricts the list to the licenses used in project rewards where the project is assigned in that nodes",
            "in": "query",
            "name": "node",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by individual project(s). Multiple projects can be specified. Restricts the list to the licenses used in rewards for that projects",
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Get results by specified lang. Multiple langs can be specified",
            "in": "query",
            "name": "lang",
            "type": "string"
          },
          {
            "description": "Filter from date. Ex. \"2013-01-01\". Restricts the list to the licenses used in the project rewards where the project was published after that date (included)",
            "format": "date",
            "in": "query",
            "name": "from_date",
            "type": "string"
          },
          {
            "description": "Filter until date.. Ex. \"2014-01-01\". Restricts the list to the licenses used in the project rewards where the project was published before that date (included)",
            "format": "date",
            "in": "query",
            "name": "to_date",
            "type": "string"
          },
          {
            "description": "Filter by project category. Multiple categories can be specified. Restricts the list to the licenses used in project rewards in that categories",
            "in": "query",
            "name": "category",
            "type": "integer"
          },
          {
            "collectionFormat": "csv",
            "description": "Filter by project location (Latitude,longitude,Radius in Km). Restricts the list to the licenses used in project rewards where the project is geolocated in that area.",
            "in": "query",
            "name": "location",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available licenses",
            "schema": {
              "$ref": "#/definitions/api_licenses_licenses_get_ResponseLicense"
            }
          },
          "400": {
            "description": "Invalid parameters format"
          },
          "401": {
            "description": "Resource requires authorization"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "License API",
        "tags": [
          "licenses"
        ]
      }
    },
    "/login": {
      "get": {
        "description": "This resource returns login information.<br/>https://developers.goteo.org/doc/licenses",
        "responses": {
          "200": {
            "description": "Bearer token data ready for an OAuth implicit authorization",
            "schema": {
              "$ref": "#/definitions/api_auth_token_get_Token"
            }
          },
          "401": {
            "description": "Resource requires authorization"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Auth API",
        "tags": [
          "auth"
        ]
      }
    },
    "/projects/": {
      "get": {
        "description": "This resource returns project information.<br/>http://developers.goteo.org/doc/projects",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "Filter by individual node(s). Multiple nodes can be specified. Restricts the list to the projects originally created in that node(s)",
            "in": "query",
            "name": "node",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by individual project(s). Multiple projects can be specified",
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Get results by specified lang. Multiple langs can be specified",
            "in": "query",
            "name": "lang",
            "type": "string"
          },
          {
            "description": "Filter from date. Ex. \"2013-01-01\". Restricts the list to the projects created in that range",
            "format": "date",
            "in": "query",
            "name": "from_date",
            "type": "string"
          },
          {
            "description": "Filter until date.. Ex. \"2014-01-01\". Restricts the list to the projects created in that range",
            "format": "date",
            "in": "query",
            "name": "to_date",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by project category. Multiple categories can be specified. Restricts the list to the projects that have interests in that category(ies)",
            "in": "query",
            "name": "category",
            "type": "integer"
          },
          {
            "collectionFormat": "csv",
            "description": "Filter by project location (Latitude,longitude,Radius in Km). Restricts the list to the projects used in projects geolocated in that area",
            "in": "query",
            "name": "location",
            "type": "number"
          },
          {
            "description": "Page number (starting at 1) if the result can be paginated",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "Page limit (maximum 50 results, defaults to 10) if the result can be paginated",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available projects",
            "schema": {
              "$ref": "#/definitions/api_projects_projects_get_ResponseProject"
            }
          },
          "400": {
            "description": "Invalid parameters format"
          },
          "401": {
            "description": "Resource requires authorization"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Project API",
        "tags": [
          "projects"
        ]
      }
    },
    "/projects/{project_id}": {
      "get": {
        "description": "This resource returns project detailed information.<br/>http://developers.goteo.org/projects#project",
        "parameters": [
          {
            "description": "Unique ID for the project",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Project data",
            "schema": {
              "$ref": "#/definitions/api_projects_project_get_ProjectFull"
            }
          },
          "401": {
            "description": "Resource requires authorization"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Project API",
        "tags": [
          "project"
        ]
      }
    },
    "/projects/{project_id}/donors/": {
      "get": {
        "description": "This resource returns user donors information.<br/>http://developers.goteo.org/projects#donors",
        "parameters": [
          {
            "description": "Unique ID for the project",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by individual node(s). Multiple nodes can be specified. Restricts the list to the users originally created in that node(s)",
            "in": "query",
            "name": "node",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Get results by specified lang. Multiple langs can be specified",
            "in": "query",
            "name": "lang",
            "type": "string"
          },
          {
            "description": "Filter from date. Ex. \"2013-01-01\". Restricts the list to the users created in that range",
            "format": "date",
            "in": "query",
            "name": "from_date",
            "type": "string"
          },
          {
            "description": "Filter until date.. Ex. \"2014-01-01\". Restricts the list to the users created in that range",
            "format": "date",
            "in": "query",
            "name": "to_date",
            "type": "string"
          },
          {
            "description": "Filter by project category. Multiple users can be specified. Restricts the list to the users that have interests in that category(ies)",
            "in": "query",
            "name": "category",
            "type": "integer"
          },
          {
            "description": "Page number (starting at 1) if the result can be paginated",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "Page limit (maximum 50 results, defaults to 10) if the result can be paginated",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Donor's data",
            "schema": {
              "$ref": "#/definitions/api_projects_project_donors_get_ResponseDonor"
            }
          },
          "401": {
            "description": "Resource requires authorization"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Project API",
        "tags": [
          "project_donors"
        ]
      }
    },
    "/reports/community/": {
      "get": {
        "description": "This resource returns statistics about the community in Goteo.<br/>http://developers.goteo.org/doc/reports#community",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "Filter by individual node(s). Multiple nodes can be specified",
            "in": "query",
            "name": "node",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by individual project(s). Multiple projects can be specified",
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Get results by specified lang. Multiple langs can be specified",
            "in": "query",
            "name": "lang",
            "type": "string"
          },
          {
            "description": "Filter from date. Ex. \"2013-01-01\"",
            "format": "date",
            "in": "query",
            "name": "from_date",
            "type": "string"
          },
          {
            "description": "Filter until date.. Ex. \"2014-01-01\"",
            "format": "date",
            "in": "query",
            "name": "to_date",
            "type": "string"
          },
          {
            "description": "Filter by project category. Multiple categories can be specified",
            "in": "query",
            "name": "category",
            "type": "integer"
          },
          {
            "collectionFormat": "csv",
            "description": "Filter by project location (Latitude,longitude,Radius in Km)",
            "in": "query",
            "name": "location",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Community object",
            "schema": {
              "$ref": "#/definitions/api_reports_reports_community_get_Community"
            }
          },
          "400": {
            "description": "Invalid parameters format"
          },
          "401": {
            "description": "Resource requires authorization"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Community Stats API",
        "tags": [
          "reports_community"
        ]
      }
    },
    "/reports/money/": {
      "get": {
        "description": "This resource returns statistics about money in Goteo.<br/>http://developers.goteo.org/doc/reports#money",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "Filter by individual node(s). Multiple nodes can be specified",
            "in": "query",
            "name": "node",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by individual project(s). Multiple projects can be specified",
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "description": "Filter from date. Ex. \"2013-01-01\"",
            "format": "date",
            "in": "query",
            "name": "from_date",
            "type": "string"
          },
          {
            "description": "Filter until date.. Ex. \"2014-01-01\"",
            "format": "date",
            "in": "query",
            "name": "to_date",
            "type": "string"
          },
          {
            "description": "Filter by project category. Multiple categories can be specified",
            "in": "query",
            "name": "category",
            "type": "integer"
          },
          {
            "collectionFormat": "csv",
            "description": "Filter by project location (Latitude,longitude,Radius in Km)",
            "in": "query",
            "name": "location",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available projects",
            "schema": {
              "$ref": "#/definitions/api_reports_reports_money_get_Money"
            }
          },
          "400": {
            "description": "Invalid parameters format"
          },
          "401": {
            "description": "Resource requires authorization"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Money Stats API",
        "tags": [
          "reports_money"
        ]
      }
    },
    "/reports/projects/": {
      "get": {
        "description": "This resource returns statistics about projects in Goteo.<br/>http://developers.goteo.org/doc/reports#projects",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "Filter by individual node(s). Multiple nodes can be specified.",
            "in": "query",
            "name": "node",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by individual project(s). Multiple projects can be specified",
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "description": "Filter from date. Ex. \"2013-01-01\"",
            "format": "date",
            "in": "query",
            "name": "from_date",
            "type": "string"
          },
          {
            "description": "Filter until date.. Ex. \"2014-01-01\"",
            "format": "date",
            "in": "query",
            "name": "to_date",
            "type": "string"
          },
          {
            "description": "Filter by project category. Multiple categories can be specified",
            "in": "query",
            "name": "category",
            "type": "integer"
          },
          {
            "collectionFormat": "csv",
            "description": "Filter by project location (Latitude,longitude,Radius in Km)",
            "in": "query",
            "name": "location",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available projects",
            "schema": {
              "$ref": "#/definitions/api_reports_reports_projects_get_Project"
            }
          },
          "400": {
            "description": "Invalid parameters format"
          },
          "401": {
            "description": "Resource requires authorization"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Projects Stats API",
        "tags": [
          "reports_projects"
        ]
      }
    },
    "/reports/rewards/": {
      "get": {
        "description": "This resource returns statistics about rewards in Goteo.<br/>http://developers.goteo.org/doc/reports#rewards",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "Filter by individual node(s). Multiple nodes can be specified",
            "in": "query",
            "name": "node",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by individual project(s). Multiple projects can be specified",
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "description": "Filter from date. Ex. \"2013-01-01\"",
            "format": "date",
            "in": "query",
            "name": "from_date",
            "type": "string"
          },
          {
            "description": "Filter until date.. Ex. \"2014-01-01\"",
            "format": "date",
            "in": "query",
            "name": "to_date",
            "type": "string"
          },
          {
            "description": "Filter by project category. Multiple categories can be specified",
            "in": "query",
            "name": "category",
            "type": "integer"
          },
          {
            "collectionFormat": "csv",
            "description": "Filter by project location (Latitude,longitude,Radius in Km)",
            "in": "query",
            "name": "location",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available projects",
            "schema": {
              "$ref": "#/definitions/api_reports_reports_rewards_get_Reward"
            }
          },
          "400": {
            "description": "Invalid parameters format"
          },
          "401": {
            "description": "Resource requires authorization"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Reward Stats API",
        "tags": [
          "reports_rewards"
        ]
      }
    },
    "/reports/summary/": {
      "get": {
        "description": "This resource returns statistics about the summary in Goteo.<br/>http://developers.goteo.org/doc/reports#summary",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "Filter by individual node(s). Multiple nodes can be specified",
            "in": "query",
            "name": "node",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by individual project(s). Multiple projects can be specified",
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "description": "Filter from date. Ex. \"2013-01-01\"",
            "format": "date",
            "in": "query",
            "name": "from_date",
            "type": "string"
          },
          {
            "description": "Filter until date.. Ex. \"2014-01-01\"",
            "format": "date",
            "in": "query",
            "name": "to_date",
            "type": "string"
          },
          {
            "description": "Filter by project category. Multiple categories can be specified",
            "in": "query",
            "name": "category",
            "type": "integer"
          },
          {
            "collectionFormat": "csv",
            "description": "Filter by project location (Latitude,longitude,Radius in Km)",
            "in": "query",
            "name": "location",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available projects",
            "schema": {
              "$ref": "#/definitions/api_reports_reports_summary_get_Summary"
            }
          },
          "400": {
            "description": "Invalid parameters format"
          },
          "401": {
            "description": "Resource requires authorization"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Summary Stats API",
        "tags": [
          "reports_summary"
        ]
      }
    },
    "/users/": {
      "get": {
        "description": "This resource returns user information.<br/>http://developers.goteo.org/doc/users",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "Filter by individual node(s). Multiple nodes can be specified. Restricts the list to the users originally created in that node(s)",
            "in": "query",
            "name": "node",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by individual project(s). Multiple projects can be specified. Restricts the list to the users that have either collaborate or contributed (financially) to that project(s).",
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Get results by specified lang. Multiple langs can be specified",
            "in": "query",
            "name": "lang",
            "type": "string"
          },
          {
            "description": "Filter from date. Ex. \"2013-01-01\". Restricts the list to the users created in that range",
            "format": "date",
            "in": "query",
            "name": "from_date",
            "type": "string"
          },
          {
            "description": "Filter until date.. Ex. \"2014-01-01\". Restricts the list to the users created in that range",
            "format": "date",
            "in": "query",
            "name": "to_date",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by user categories. Multiple categories can be specified. Restricts the list to the users that have interests in that category(ies)",
            "in": "query",
            "name": "category",
            "type": "integer"
          },
          {
            "description": "Page number (starting at 1) if the result can be paginated",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "Page limit (maximum 50 results, defaults to 10) if the result can be paginated",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available users",
            "schema": {
              "$ref": "#/definitions/api_users_users_get_ResponseUser"
            }
          },
          "400": {
            "description": "Invalid parameters format"
          },
          "401": {
            "description": "Resource requires authorization"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "User API",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{user_id}": {
      "get": {
        "description": "This resource returns user information.<br/>http://developers.goteo.org/users#user",
        "parameters": [
          {
            "description": "Unique ID for the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User data",
            "schema": {
              "$ref": "#/definitions/api_users_user_get_UserFull"
            }
          },
          "401": {
            "description": "Resource requires authorization"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "User API",
        "tags": [
          "user"
        ]
      }
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    }
  },
  "swagger": "2.0"
}